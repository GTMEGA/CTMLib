buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
    }
    dependencies {
        classpath 'com.github.GTNH2:ForgeGradle:FG_1.2-SNAPSHOT'
        classpath 'org.ajoberstar:gradle-git:0.10.1'
    }
}
plugins {
    id 'com.matthewprenger.cursegradle' version '1.0.3'
}

apply plugin: 'forge'
apply plugin: 'maven-publish'

compileJava {
	options.encoding = 'UTF-8'
}

minecraft {
    version = "${minecraft_version}-${forge_version}"
    runDir = "run"

    replaceIn "CTMLib.java"
    replace "@VERSION@", project.version
}

import org.ajoberstar.grgit.Grgit

def repo = Grgit.open(project.file('.'))
project.ext.gitHash = repo.log().find().abbreviatedId

boolean dev = System.getenv("RELEASE") == null || System.getenv("RELEASE").equalsIgnoreCase("false")

ext.buildnumber = 0
project.buildnumber = System.getenv('BUILD_NUMBER') == null ? "CUSTOM" : System.getenv('BUILD_NUMBER')

version = dev ? project.ext.gitHash + "-${buildnumber}" : "MC${minecraft_version}-${mod_version}.${buildnumber}"
group = "team.chisel.ctmlib" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = dev ? "CTMLib_DEV" : "CTMLib"


repositories {
    maven { url = "http://mobiusstrip.eu/maven" }
    maven { url = "http://chickenbones.net/maven/" }
    maven { url = "http://maven.tterrag.com/" }
    maven { url = "https://jitpack.io" }
}

dependencies {
    compile "com.github.GTMEGA:chisel:${chisel_version}:api"
    compileOnly "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"
}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version': project.version, 'mcversion': project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

jar {
    exclude "com/cricketcraft/chisel/**/*"
}

// Create deobf dev jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// Create source attachment for dev jar
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives deobfJar
    archives sourcesJar
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact deobfJar
            artifact sourcesJar
        }
    }

    repositories {
        if (project.hasProperty('mavendir')) {
            maven { url mavendir }
        }
    }
}

println('Changelog:\n' + getChangelogText())


String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "${archivesBaseName} ${mod_version}.${buildnumber}"
                temp = "<h2>$temp</h2>"
            } else if (it.trim().startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}

tasks.curseforge.dependsOn 'reobf'
tasks.curseforge.enabled = !dev && project.hasProperty('curseforge_key')
    
curseforge {
    if (project.hasProperty('curseforge_key')) {
        apiKey = project.curseforge_key
    }

    project {
        id = project.projectId
        changelog = System.getenv('CHANGELOG') == null || System.getenv('CHANGELOG').equals('none') ? getChangelogText() : System.getenv('CHANGELOG')
        changelogType = 'html'
        releaseType = 'release'
        mainArtifact(jar) {
            displayName = "CTMLib - ${mod_version}.${buildnumber}"
        }
        addArtifact deobfJar
        addArtifact sourcesJar
    }
}

idea { module { inheritOutputDirs = true } }